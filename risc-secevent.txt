



                                                            M. Scurtescu
                                                                  Google
                                                              A. Backman
                                                                  Amazon
                                                                 P. Hunt
                                                                  Oracle
                                                              J. Bradley
                                                                  Yubico
                                                        January 26, 2018


                  RISC profile of IETF Security Events
                            risc-secevent-00

Abstract

   This spec is a general profile for IETF Security Events [SECEVENT]
   and it defines:

   o  Subject Identifiers

   o  a configuration information discovery method for Transmitters

   o  a Management API for Event Streams

   This spec also directly profiles several IETF Security Events drafts:

   o  Security Event Token (SET) [SET]

   o  SET Token Delivery Using HTTP [DELIVERY]

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   2
   2.  Subject Identifiers . . . . . . . . . . . . . . . . . . . . .   2
     2.1.  Subject Identifier Types  . . . . . . . . . . . . . . . .   3
       2.1.1.  Email Subject Identifier Type . . . . . . . . . . . .   3
       2.1.2.  Phone Number Subject Identifier Type  . . . . . . . .   4
       2.1.3.  Issuer and Subject Subject Identifier Type  . . . . .   4
   3.  Transmitter Configuration Discovery . . . . . . . . . . . . .   4
     3.1.  Transmitter Configuration Metadata  . . . . . . . . . . .   4
     3.2.  Obtaining Transmitter Configuration Information . . . . .   5
       3.2.1.  Transmitter Configuration Request . . . . . . . . . .   5
       3.2.2.  Transmitter Configuration Response  . . . . . . . . .   5
       3.2.3.  Transmitter Configuration Validation  . . . . . . . .   5
   4.  Management API for SET Event Streams  . . . . . . . . . . . .   5
     4.1.  Event Stream Management . . . . . . . . . . . . . . . . .   6



Scurtescu, et al.         Expires July 30, 2018                 [Page 1]

                              risc-secevent                 January 2018


       4.1.1.  Stream Configuration  . . . . . . . . . . . . . . . .   7
         4.1.1.1.  Checking a Stream's Status  . . . . . . . . . . .   8
         4.1.1.2.  Reading a Stream's Configuration  . . . . . . . .   8
         4.1.1.3.  Updating a Stream's Configuration . . . . . . . .  10
       4.1.2.  Subjects  . . . . . . . . . . . . . . . . . . . . . .  11
         4.1.2.1.  Adding a Subject to a Stream  . . . . . . . . . .  12
         4.1.2.2.  Removing a Subject  . . . . . . . . . . . . . . .  13
       4.1.3.  Verification  . . . . . . . . . . . . . . . . . . . .  15
         4.1.3.1.  Verification Event  . . . . . . . . . . . . . . .  15
         4.1.3.2.  Triggering a Verification Event.  . . . . . . . .  15
     4.2.  Authorization . . . . . . . . . . . . . . . . . . . . . .  17
     4.3.  Subject Claims for Subject Add and Remove Operations  . .  18
     4.4.  Security Considerations . . . . . . . . . . . . . . . . .  18
       4.4.1.  Subject Probing . . . . . . . . . . . . . . . . . . .  18
       4.4.2.  Information Harvesting  . . . . . . . . . . . . . . .  18
       4.4.3.  Malicious Subject Removal . . . . . . . . . . . . . .  18
   5.  Profiles  . . . . . . . . . . . . . . . . . . . . . . . . . .  19
     5.1.  Security Event Token Profle . . . . . . . . . . . . . . .  19
       5.1.1.  Signature Key Resolution  . . . . . . . . . . . . . .  19
       5.1.2.  RISC Event Subject  . . . . . . . . . . . . . . . . .  19
       5.1.3.  aud Claim . . . . . . . . . . . . . . . . . . . . . .  19
       5.1.4.  Security Considerations . . . . . . . . . . . . . . .  20
     5.2.  SET Token Delivery Using HTTP Profile . . . . . . . . . .  20
       5.2.1.  Stream Configuration Metadata . . . . . . . . . . . .  20
         5.2.1.1.  Push Delivery using HTTP  . . . . . . . . . . . .  20
         5.2.1.2.  Polling Delivery using HTTP . . . . . . . . . . .  20
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  20
     6.1.  RISC Subject Identifier Types Registry  . . . . . . . . .  20
   7.  Privacy Considerations  . . . . . . . . . . . . . . . . . . .  21
     7.1.  Subject Information Leakage . . . . . . . . . . . . . . .  21
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  21
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  21
     8.2.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .  22
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  22

1.  Introduction

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

2.  Subject Identifiers

   The RISC profile defines a structure called a Subject Identifier: a
   JSON object containing a set of claims that collectively uniquely
   identify a subject, according to a simple schema called a Subject



Scurtescu, et al.         Expires July 30, 2018                 [Page 2]

                              risc-secevent                 January 2018


   Identifier Type.  Every Subject Identifier MUST contain a
   "subject_type" claim, whose value MUST be a name that uniquely
   identifies the Subject Identifier Type of the Subject Identifier.
   Any remaining claims within the Subject Identifier MUST be
   interpreted according to the definition of the Subject Identifier
   Type.  A Subject Identifier MUST conform to the Subject Identifier
   Type identified by its "subject_type" claim, and MUST NOT contain any
   claims not defined by its Subject Identifier Type.

   {
   "subject_type": "email",
   "email": "foo@example.com"
   }

   A Subject Identifier that identifies a subject by email address.

                Figure 1: Example: Email Subject Identifier

   {
   "subject_type": "iss-sub",
   "iss": "https://issuer.example.com/",
   "sub": "abc1234"
   }

   A Subject Identifier that identifies a subject by an identifier
   provided by an issuer.

         Figure 2: Example: Issuer and Subject Subject Identifier

2.1.  Subject Identifier Types

   A Subject Identifier Type is a light-weight schema that describes a
   set of claims that uniquely identifies a subject.  Every Subject
   Identifier Type MUST have a unique name registered in the IANA "RISC
   Subject Identifier Types" registry established by Section 6.1.  A
   Subject Identifier Type MAY contain more claims than are strictly
   necessary to uniquely identify a subject, however a Subject
   Identifier MUST contain all of the claims required by its type (See
   Privacy Considerations).

   The following Subject Identifier Types are registered in the IANA
   "RISC Subject Identifier Types" registry established by Section 6.1.

2.1.1.  Email Subject Identifier Type

   The Email Subject Identifier Type describes a subject by email
   address.  Subject Identifiers of this type MUST contain an "email"
   claim whose value is a string containing the email address of the



Scurtescu, et al.         Expires July 30, 2018                 [Page 3]

                              risc-secevent                 January 2018


   subject.  The "email" claim MUST NOT be null or empty.  The Email
   Subject Identifier Type is identified by the name "email".

2.1.2.  Phone Number Subject Identifier Type

   The Phone Number Subject Identifier Type describes a subject by
   telephone number.  Subject Identifiers of this type MUST contain a
   "phone" claim whose value is a string containing the full telephone
   number of the subject, including international dialing prefix,
   formatted according to E.164 [E164].  The "phone" claim MUST NOT be
   null or empty.  The Phone Number Subject Identifier Type is
   identified by the name "phone".

2.1.3.  Issuer and Subject Subject Identifier Type

   The Issuer and Subject Subject Identifier Type describes a subject by
   an issuer and a subject.  Subject Identifiers of this type MUST
   contain an "iss" claim whose value identifies the issuer, and a "sub"
   claim whose value identifies the subject with respect to the issuer.
   These claims MUST follow the formats of the "iss" claim and "sub"
   claim defined by [RFC7519], respectively.  Both the "iss" claim and
   the "sub" claim MUST NOT be null or empty.  The Issuer and Subject
   Subject Identifier Type is identified by the name "iss-sub".

3.  Transmitter Configuration Discovery

   This section defines a mechanism for Receivers to obtain Transmitter
   configuration information.

3.1.  Transmitter Configuration Metadata

   Transmitters have metadata describing their configuration:

   issuer  REQUIRED.  URL using the https scheme with no query or
      fragment component that the Transmitter asserts as its Issuer
      Identifier.  This MUST be identical to the iss Claim value in
      Security Event Tokens issued from this Transmitter.

   jwks_uri  REQUIRED.  URL of the Transmitter's JSON Web Key Set [JWK]
      document.  This contains the signing key(s) the Receiver uses to
      validate signatures from the Transmitter.

   delivery_methods_supported  RECOMMENDED.  List of supported delivery
      method URIs.

   configuration_endpoint  OPTIONAL.  The URL of the Configuration
      Endpoint.




Scurtescu, et al.         Expires July 30, 2018                 [Page 4]

                              risc-secevent                 January 2018


   status_endpoint  OPTIONAL.  The URL of the Status Endpoint.

   add_subject_endpoint  OPTIONAL.  The URL of the Add Subject Endpoint.

   remove_subject_endpoint  OPTIONAL.  The URL of the Remove Subject
      Endpoint.

   verification_endpoint  OPTIONAL.  The URL of the Verification
      Endpoint.

3.2.  Obtaining Transmitter Configuration Information

   Using the Issuer as documented by the Transmitter, the Transmitter
   configuration information can be retrieved.

   Transmitters supporting Discovery MUST make a JSON document available
   at the path formed by concatenating the string "/.well-known/risc-
   configuration" to the Issuer.  The syntax and semantics of ".well-
   known" are defined in RFC 5785 and apply to the Issuer value when it
   contains no path component. "risc-configuration" MUST point to a JSON
   document compliant with this specification and MUST be returned using
   the "application/json" content type.

3.2.1.  Transmitter Configuration Request

   TODO

3.2.2.  Transmitter Configuration Response

   TODO

3.2.3.  Transmitter Configuration Validation

   TODO

4.  Management API for SET Event Streams

   This section defines an HTTP API to be implemented by Event
   Transmitters and that can be used by Event Receivers to query the
   Event Stream status, to add and remove subjects and to trigger
   verification.










Scurtescu, et al.         Expires July 30, 2018                 [Page 5]

                              risc-secevent                 January 2018


   +------------+                +------------+
   |            | Stream Config  |            |
   | Event      <----------------+ Event      |
   | Stream     |                | Receiver   |
   | Management | Stream Status  |            |
   | API        <----------------+            |
   |            |                |            |
   |            | Add Subject    |            |
   |            <----------------+            |
   |            |                |            |
   |            | Remove Subject |            |
   |            <----------------+            |
   |            |                |            |
   |            | Verification   |            |
   |            <----------------+            |
   |            |                |            |
   +------------+                +------------+

                   Figure 3: Event Stream Management API

   How events are delivered and the structure of events are not in scope
   for this specification.

4.1.  Event Stream Management

   Event Receivers manage how they receive events, and the subjects
   about which they want to receive events over an Event Stream by
   making HTTP requests to endpoints in the Event Stream Management API.

   The Event Stream Management API is implemented by the Event
   Transmitter and consists of the following endpoints:

   Configuration Endpoint
      An endpoint used to read the Event Stream's current configuration.

   Status Endpoint
      An endpoint used to read the Event Stream's current status.

   Add Subject Endpoint
      An endpoint used to add subjects to an Event Stream.

   Remove Subject Endpoint
      An endpoint used to remove subjects from an Event Stream.

   Verification Endpoint
      An endpoint used to request the Event Transmitter transmit a
      Verification Event over the Event Stream.




Scurtescu, et al.         Expires July 30, 2018                 [Page 6]

                              risc-secevent                 January 2018


   An Event Transmitter MAY use the same URLs as endpoints for multiple
   streams, provided that the Event Transmitter has some mechanism
   through which they can identify the applicable Event Stream for any
   given request, e.g. from authentication credentials.  The definition
   of such mechanisms is outside the scope of this specification.

4.1.1.  Stream Configuration

   An Event Stream's configuration is represented as a JSON object with
   the following properties:

   aud
      A string containing an audience claim as defined in JSON Web Token
      (JWT) [RFC7519] that identifies the Event Receiver for the Event
      Stream.  This property cannot be updated.

   events
      OPTIONAL.  An array of URIs identifying the set of events which
      MAY be delivered over the Event Stream.  If omitted, Event
      Transmitters SHOULD make this set available to the Event Receiver
      via some other means (e.g. publishing it in online documentation).

   delivery
      A JSON object containing a set of name/value pairs specifying
      configuration parameters for the SET delivery method.  The actual
      delivery method is identified by the special key "delivery_method"
      with the value being a URI as defined in [DELIVERY].

   min_verification_interval
      An integer indicating the minimum amount of time in seconds that
      must pass in between verification requests.  If an Event Receiver
      submits verification requests more frequently than this, the Event
      Transmitter MAY respond with a 429 status code.  An Event
      Transmitter SHOULD NOT respond with a 429 status code if an Event
      Receiver is not exceeding this frequency.

   subject_type  The subject type that the Receiver wants for the
      events.  If not set then the Transmitter might decide to use a
      subject type that discloses more infirmation than necessary.

   status
      A string indicating the current status of the event stream.  It
      MUST have one of the following values:

      enabled
         The transmitter will transmit events over the stream, according
         to the stream's configured delivery method.




Scurtescu, et al.         Expires July 30, 2018                 [Page 7]

                              risc-secevent                 January 2018


      paused
         The transmitter will not transmit events over the stream.  The
         transmitter will hold any events it would have transmitted
         while paused, and will transmit them when the stream's status
         becomes "enabled".

      disabled
         The transmitter will not transmit events over the stream, and
         will not hold any events for later transmission.

4.1.1.1.  Checking a Stream's Status

   An Event Receiver checks the current status of an event stream by
   making an HTTP GET request to the stream's Status Endpoint.  On
   receiving a valid request the Event Transmitter responds with a 200
   OK response containing a [JSON] object with a single attribute
   "status", whose string value is the value of the stream's status.

   The following is a non-normative example request to check an event
   stream's status:

   GET /set/stream/status HTTP/1.1
   Host: transmitter.example.com
   Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

              Figure 4: Example: Check Stream Status Request

   The following is a non-normative example response:

   HTTP/1.1 200 OK
   Content-Type: application/json; charset=UTF-8
   Cache-Control: no-store
   Pragma: no-cache

   {
   "status": "enabled"
   }

              Figure 5: Example: Check Stream Status Response

4.1.1.2.  Reading a Stream's Configuration

   An Event Receiver gets the current configuration of a stream by
   making an HTTP GET request to the Configuration Endpoint.  On
   receiving a valid request the Event Transmitter responds with a 200
   OK response containing a [JSON] representation of the stream's
   configuration in the body.




Scurtescu, et al.         Expires July 30, 2018                 [Page 8]

                              risc-secevent                 January 2018


   The following is a non-normative example request to read an Event
   Stream's configuration:

   GET /set/stream HTTP/1.1
   Host: transmitter.example.com
   Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

           Figure 6: Example: Read Stream Configuration Request

   The following is a non-normative example response:

   HTTP/1.1 200 OK
   Content-Type: application/json; charset=UTF-8
   Cache-Control: no-store
   Pragma: no-cache

   {
   "aud": "http://www.example.com",
   "delivery": {
     "delivery_method": "urn:example:secevent:delivery:http_post",
     "url": "https://receiver.example.com/events"
   },
   "status": "enabled",
   "events": [
     "urn:example:secevent:events:type_1",
     "urn:example:secevent:events:type_2",
     "urn:example:secevent:events:type_3"
   ],
   "min_verification_interval": 60,
   }

           Figure 7: Example: Read Stream Configuration Response

   Errors are signaled with HTTP staus codes as follows:

   +------+------------------------------------------------------------+
   | Code | Description                                                |
   +------+------------------------------------------------------------+
   | 401  | if authorization failed or it is missing                   |
   |      |                                                            |
   | 403  | if the Event Receiver is not allowed to read the stream    |
   |      | configuration                                              |
   |      |                                                            |
   | 404  | if there is no Event Stream configured for this Event      |
   |      | Receiver                                                   |
   +------+------------------------------------------------------------+

                 Table 1: Read Stream Configuration Errors



Scurtescu, et al.         Expires July 30, 2018                 [Page 9]

                              risc-secevent                 January 2018


4.1.1.3.  Updating a Stream's Configuration

   An Event Receiver updates the current configuration of a stream by
   making an HTTP POST request to the Configuration Endpoint.  The POST
   body contains a {{!JSON} representation of the updated configuration.
   On receiving a valid request the Event Transmitter responds with a
   200 OK response containing a [JSON] representation of the updated
   stream configuration in the body.

   The full set of editable properties must be present in the POST body,
   not only the ones that are specifically intended to be changed.
   Missing properties SHOULD be interpreted as requested to be deleted.
   Event Receivers should read the configuration first, modify the
   [JSON] representation, then make an update request.

   Properties that cannot be updated MAY be present, but they MUST match
   the expected value.

   The following is a non-normative example request to read an Event
   Stream's configuration:

   POST /set/stream HTTP/1.1
   Host: transmitter.example.com
   Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

   {
   "aud": "http://www.example.com",
   "delivery": {
     "delivery_method": "urn:example:secevent:delivery:http_post",
     "url": "https://receiver.example.com/events"
   },
   "status": "paused",
   "events": [
     "urn:example:secevent:events:type_1",
     "urn:example:secevent:events:type_2",
     "urn:example:secevent:events:type_3"
   ]
   }

          Figure 8: Example: Update Stream Configuration Request

   The following is a non-normative example response:









Scurtescu, et al.         Expires July 30, 2018                [Page 10]

                              risc-secevent                 January 2018


   HTTP/1.1 200 OK
   Content-Type: application/json; charset=UTF-8
   Cache-Control: no-store
   Pragma: no-cache

   {
   "aud": "http://www.example.com",
   "delivery": {
     "delivery_method": "urn:example:secevent:delivery:http_post",
     "url": "https://receiver.example.com/events"
   },
   "status": "paused",
   "events": [
     "urn:example:secevent:events:type_1",
     "urn:example:secevent:events:type_2",
     "urn:example:secevent:events:type_3"
   ]
   }

          Figure 9: Example: Update Stream Configuration Response

   Errors are signaled with HTTP staus codes as follows:

   +------+------------------------------------------------------------+
   | Code | Description                                                |
   +------+------------------------------------------------------------+
   | 400  | if the request body cannot be parsed or if the request is  |
   |      | otherwise invalid                                          |
   |      |                                                            |
   | 401  | if authorization failed or it is missing                   |
   |      |                                                            |
   | 403  | if the Event Receiver is not allowed to update the stream  |
   |      | configuration                                              |
   +------+------------------------------------------------------------+

                Table 2: Update Stream Configuration Errors

4.1.2.  Subjects

   An Event Receiver can indicate to an Event Transmitter whether or not
   the receiver wants to receive events about a particular subject by
   "adding" or "removing" that subject to the Event Stream,
   respectively.








Scurtescu, et al.         Expires July 30, 2018                [Page 11]

                              risc-secevent                 January 2018


4.1.2.1.  Adding a Subject to a Stream

   To add a subject to an Event Stream, the Event Receiver makes an HTTP
   POST request to the Add Subject Endpoint, containing in the body a
   Subject Identifier Object identifying the subject to be added.  On a
   successful response, the Event Transmitter responds with an empty 200
   OK response.

   The Event Transmitter MAY choose to silently ignore the request, for
   example if the subject has previously indicated to the transmitter
   that they do not want events to be transmitted to the Event Receiver.
   In this case, the transmitter MAY return an empty 200 OK response or
   an appropriate error code (See Security Considerations
   (Section 4.4)).

   Errors are signaled with HTTP status codes as follows:

   +------+------------------------------------------------------------+
   | Code | Description                                                |
   +------+------------------------------------------------------------+
   | 400  | if the request body cannot be parsed or if the request is  |
   |      | otherwise invalid                                          |
   |      |                                                            |
   | 401  | if authorization failed or it is missing                   |
   |      |                                                            |
   | 403  | if the Event Receiver is not allowed to add this           |
   |      | particular subject                                         |
   |      |                                                            |
   | 404  | if the subject is not recognized by the Event Transmitter, |
   |      | the Event Transmitter may chose to stay silent in this     |
   |      | case and respond with 200                                  |
   |      |                                                            |
   | 429  | if the Event Receiver is sending too many requests in a    |
   |      | gvien amount of time                                       |
   +------+------------------------------------------------------------+

                        Table 3: Add Subject Errors

   The following is a non-normative example request to add a subject to
   a stream, where the subject is identified by an OpenID Connect email
   claim:










Scurtescu, et al.         Expires July 30, 2018                [Page 12]

                              risc-secevent                 January 2018


   POST /set/subjects:add HTTP/1.1
   Host: transmitter.example.com
   Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

   {
   "email": "example.user@example.com"
   }

                  Figure 10: Example: Add Subject Request

   The following is a non-normative example response to a successful
   request:

   HTTP/1.1 200 OK
   Server: transmitter.example.com
   Cache-Control: no-store
   Pragma: no-cache

                 Figure 11: Example: Add Subject Response

4.1.2.2.  Removing a Subject

   To remove a subject from an Event Stream, the Event Receiver makes an
   HTTP POST request to the Remove Subject Endpoint, containing in the
   body a Subject Identifier Object identifying the subject to be
   removed.  On a successful response, the Event Transmitter responds
   with a 204 No Content response.

   Errors are signaled with HTTP staus codes as follows:






















Scurtescu, et al.         Expires July 30, 2018                [Page 13]

                              risc-secevent                 January 2018


   +------+------------------------------------------------------------+
   | Code | Description                                                |
   +------+------------------------------------------------------------+
   | 400  | if the request body cannot be parsed or if the request is  |
   |      | otherwise invalid                                          |
   |      |                                                            |
   | 401  | if authorization failed or it is missing                   |
   |      |                                                            |
   | 403  | if the Event Receiver is not allowed to remove this        |
   |      | particular subject                                         |
   |      |                                                            |
   | 404  | if the subject is not recognized by the Event Transmitter, |
   |      | the Event Transmitter may chose to stay silent in this     |
   |      | case and respond with 204                                  |
   |      |                                                            |
   | 429  | if the Event Receiver is sending too many requests in a    |
   |      | gvien amount of time                                       |
   +------+------------------------------------------------------------+

                      Table 4: Remove Subject Errors

   The following is a non-normative example request where the subject is
   identified by a phone_number claim:

   POST /set/subjects:remove HTTP/1.1
   Host: transmitter.example.com
   Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

   {
   "phone_number": "+1 206 555 0123"
   }

                Figure 12: Example: Remove Subject Request

   The following is a non-normative example response to a successful
   request:

   HTTP/1.1 204 No Content
   Server: transmitter.example.com
   Cache-Control: no-store
   Pragma: no-cache

                Figure 13: Example: Remove Subject Response








Scurtescu, et al.         Expires July 30, 2018                [Page 14]

                              risc-secevent                 January 2018


4.1.3.  Verification

   In some cases, the frequency of event transmission on an Event Stream
   will be very low, making it difficult for an Event Receiver to tell
   the difference between expected behavior and event transmission
   failure due to a misconfigured stream.  Event Receivers can request
   that a verification event be transmitted over the Event Stream,
   allowing the receiver to confirm that the stream is configured
   correctly upon successful receipt of the event.  The acknowledgment
   of a Verification Event also confirms to the Event Transmitter that
   end-to-end delivery is working, including signature verification and
   encryption.

   An Event Transmitter MAY send a Verification Event at any time, even
   if one was not requested by the Event Receiver.

4.1.3.1.  Verification Event

   The Verification Event is a standard SET with the following
   attributes:

   event type
      The Event Type URI is: "urn:ietf:params:secevent:event-
      type:core:verification".

   state
      OPTIONAL An opaque value provided by the Event Receiver when the
      event is triggered.  This is a nested attribute in the event
      payload.

   Upon receiving a Verification Event, the Event Receiver SHALL parse
   the SET and validate its claims.  In particular, the Event Receiver
   SHALL confirm that the value for "state" is as expected.  If the
   value of "state" does not match, an error response of "setData"
   SHOULD be returned (see Section 2.4 of [DELIVERY]).

   In many cases, Event Transmitters MAY disable or suspend an Event
   Stream that fails to successfully verify based on the acknowledgement
   or lack of acknowledgement by the Event Receiver.

4.1.3.2.  Triggering a Verification Event.

   To request that a verification event be sent over an Event Stream,
   the Event Receiver makes an HTTP POST request to the Verification
   Endpoint, with a JSON object containing the parameters of the
   verification request, if any.  On a successful request, the event
   transmitter responds with an empty 204 No Content response.




Scurtescu, et al.         Expires July 30, 2018                [Page 15]

                              risc-secevent                 January 2018


   Verification requests have the following properties:

   state
      OPTIONAL.  An arbitrary string that the Event Transmitter MUST
      echo back to the Event Receiver in the verification event's
      payload.  Event Receivers MAY use the value of this parameter to
      correlate a verification event with a verification request.  If
      the verification event is initiated by the transmitter then this
      parameter MUST not be set.

   A successful response from a POST to the Verification Endpoint does
   not indicate that the verification event was transmitted
   successfully, only that the Event Transmitter has transmitted the
   event or will do so at some point in the future.  Event Transmitters
   MAY transmit the event via an asynchronous process, and SHOULD
   publish an SLA for verification event transmission times.  Event
   Receivers MUST NOT depend on the verification event being transmitted
   synchronously or in any particular order relative to the current
   queue of events.

   Errors are signaled with HTTP staus codes as follows:

   +------+------------------------------------------------------------+
   | Code | Description                                                |
   +------+------------------------------------------------------------+
   | 400  | if the request body cannot be parsed or if the request is  |
   |      | otherwise invalid                                          |
   |      |                                                            |
   | 401  | if authorization failed or it is missing                   |
   |      |                                                            |
   | 429  | if the Event Receiver is sending too many requests in a    |
   |      | gvien amount of time                                       |
   +------+------------------------------------------------------------+

                       Table 5: Verification Errors

   The following is a non-normative example request to trigger a
   verification event:













Scurtescu, et al.         Expires July 30, 2018                [Page 16]

                              risc-secevent                 January 2018


   POST /set/verify HTTP/1.1
   Host: transmitter.example.com
   Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
   Content-Type: application/json; charset=UTF-8

   {
   "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
   }

             Figure 14: Example: Trigger Verification Request

   The following is a non-normative example response to a successful
   request:

   HTTP/1.1 204 No Content
   Server: transmitter.example.com
   Cache-Control: no-store
   Pragma: no-cache

             Figure 15: Example: Trigger Verification Response

   And the following is a non-normative example of a verification event
   sent to the Event Receiver as a result of the above request:

   {
   "jti": "123456",
   "iss": "https://transmitter.example.com",
   "aud": "receiver.example.com",
   "iat": "1493856000",
   "events": [
     "urn:ietf:params:secevent:event-type:core:verification" : {
       "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
     },
   ],
   }

                   Figure 16: Example: Verification SET

4.2.  Authorization

   HTTP API calls from a receiver to a transmitter SHOULD be authorized
   using OAuth 2 Access Tokens.  The client id associated with the
   Access Token uniquely identifies the Receiver and the Stream.

   Receivers SHOULD use the Client Credential Grant [CLIENTCRED] to
   obtain access tokens on its own behalf.





Scurtescu, et al.         Expires July 30, 2018                [Page 17]

                              risc-secevent                 January 2018


4.3.  Subject Claims for Subject Add and Remove Operations

   TODO

4.4.  Security Considerations

4.4.1.  Subject Probing

   It may be possible for an Event Transmitter to leak information about
   subjects through their responses to add subject requests.  A 404
   response may indicate to the Event Receiver that the subject does not
   exist, which may inadvertantly reveal information about the subject
   (e.g. that a particular individual does or does not use the Event
   Transmitter's service).

   Event Transmitters SHOULD carefully evaluate the conditions under
   which they will return error responses to add subject requests.
   Event Transmitters MAY return a 204 response even if they will not
   actually send any events related to the subject, and Event Receivers
   MUST NOT assume that a 204 response means that they will receive
   events related to the subject.

4.4.2.  Information Harvesting

   SETs may contain personally identifiable information (PII) or other
   non-public information about the event transmitter, the subject (of
   an event in the SET), or the relationship between the two.  It is
   important for Event Transmitters to understand what information they
   are revealing to Event Receivers when transmitting events to them,
   lest the event stream become a vector for unauthorized access to
   private information.

   Event Transmitters SHOULD interpret add subject requests as
   statements of interest in a subject by an Event Receiver, and ARE NOT
   obligated to transmit events related to every subject an Event
   Receiver adds to the stream.  Event Transmitters MAY choose to
   transmit some, all, or no events related to any given subject and
   SHOULD validate that they are permitted to share the information
   contained within an event with the Event Receiver before transmitting
   the event.  The mechanisms by which such validation is performed are
   outside the scope of this specification.

4.4.3.  Malicious Subject Removal

   A malicious party may find it advantageous to remove a particular
   subject from a stream, in order to reduce the Event Receiver's
   ability to detect malicious activity related to the subject,
   inconvenience the subject, or for other reasons.  Consequently it may



Scurtescu, et al.         Expires July 30, 2018                [Page 18]

                              risc-secevent                 January 2018


   be in the best interests of the subject for the Event Transmitter to
   continue to send events related to the subject for some time after
   the subject has been removed from a stream.

   Event Transmitters MAY continue sending events related to a subject
   for some amount of time after that subject has been removed from the
   stream.  Event Receivers MUST tolerate receiving events for subjects
   that have been removed from the stream, and MUST NOT report these
   events as errors to the Event Transmitter.

5.  Profiles

   This section profiles several IETF secevent specifications.

   The RISC Profile makes several assumptions:

   o  Transmitters are OpenID Connect Identity Providers

   o  Receivers are OpenID Connect Clients and as such have client ids
      issued by Transmitters

   The RISC use cases that set the requirements are described in
   "Security Events RISC Use Cases" [USECASES].

5.1.  Security Event Token Profle

   This section provides RISC profiling specifications for the "Security
   Event Token (SET)" [SET] spec.

5.1.1.  Signature Key Resolution

   The signature key can be obtained through the "jwks_uri" Transmitter
   configuration [1].

5.1.2.  RISC Event Subject

   The subject of a RISC event is identified by the "subject" claim
   within the event payload, whose value is a Subject Identifier.  The
   "subject" claim is REQUIRED for all RISC events.  The JWT "sub" claim
   MUST NOT be present in any SET containing a RISC event.

5.1.3.  aud Claim

   The 'aud' claim MUST be a single value which is the client id of the
   Receiver.






Scurtescu, et al.         Expires July 30, 2018                [Page 19]

                              risc-secevent                 January 2018


5.1.4.  Security Considerations

   TODO: Id Token and Access Token confusion

5.2.  SET Token Delivery Using HTTP Profile

   This section provides RISC profiling specifications for the "SET
   Token Delivery Using HTTP" [DELIVERY] spec.

5.2.1.  Stream Configuration Metadata

   Each delivery method is identified by a URI, specified below by the
   "method" metadata.

5.2.1.1.  Push Delivery using HTTP

   method  TODO

   endpoint_url  The URL where events are pushed through HTTP POST.
      This is set by the Receiver.

   authorization_header  The HTTP Authorization header that the
      Transmitter MUST set with each event delivery.  The value is
      optional and it is set by the Receiver.

5.2.1.2.  Polling Delivery using HTTP

   method  TODO

   endpoint_url  The URL where events can be retrieved from.  This is
      specified by the Transmitter.

6.  IANA Considerations

6.1.  RISC Subject Identifier Types Registry

   This section establishes the IANA "RISC Subject Identifier Types"
   registry for Subject Identifier Types.  The registry records the name
   of the Subject Identifier Type and a reference to the specification
   that defines it.  This section registers the Subject Identifier Types
   defined in Section 2.1.

   TODO: Finish registry definition








Scurtescu, et al.         Expires July 30, 2018                [Page 20]

                              risc-secevent                 January 2018


7.  Privacy Considerations

7.1.  Subject Information Leakage

   Event issuers and recipients SHOULD take precautions to ensure that
   they do not leak information about subjects via Subject Identifiers,
   and choose appropriate Subject Identifier Types accordingly.  Parties
   SHOULD NOT identify a subject using a given Subject Identifier Type
   if doing so will allow the recipient to correlate different claims
   about the subject that they are not known to already have knowledge
   of.  Issuers and recipients SHOULD always use the same Subject
   Identifier Type and the same claim values to identify a given subject
   when communicating with a given party in order to reduce the
   possibility of information leakage.

8.  References

8.1.  Normative References

   [API]      IETF, "Management API for SET Event Streams",
              <https://tools.ietf.org/html/draft-scurtescu-secevent-
              simple-control-plane>.

   [CLIENTCRED]
              Hardt, D., "The OAuth 2.0 Authorization Framework - Client
              Credentials Grant", RFC 6749, <https://tools.ietf.org/
              html/rfc6749#section-4.4>.

   [DELIVERY]
              IETF, "SET Token Delivery Using HTTP", <https://tools.ietf
              .org/html/draft-ietf-secevent-delivery>.

   [E164]     International Telecommunication Union, "The international
              public telecommunication numbering plan", 2010,
              <http://www.itu.int/rec/T-REC-E.164-201011-I/en>.

   [IDTOKEN]  OpenID Foundation, "OpenID Connect Core 1.0 - ID Token",
              <http://openid.net/specs/
              openid-connect-core-1_0.html#IDToken>.

   [JSON]     Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <https://www.rfc-editor.org/info/rfc7159>.

   [OIDC]     OpenID Foundation, "OpenID Connect Core 1.0",
              <http://openid.net/specs/openid-connect-core-1_0.html>.





Scurtescu, et al.         Expires July 30, 2018                [Page 21]

                              risc-secevent                 January 2018


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, DOI 10.17487/
              RFC2119, March 1997, <https://www.rfc-editor.org/info/
              rfc2119>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/info/rfc7519>.

   [SECEVENT]
              IETF, "Security Events IETF Working Group",
              <https://datatracker.ietf.org/wg/secevent/about/>.

   [SET]      IETF, "Security Event Token (SET)", <https://tools.ietf
              .org/html/draft-ietf-secevent-token>.

   [USECASES]
              IETF, "Security Events RISC Use Cases",
              <https://tools.ietf.org/html/draft-scurtescu-secevent-
              risc-use-cases-00>.

8.2.  URIs

   [1] discovery

Authors' Addresses

   Marius Scurtescu
   Google

   Email: mscurtescu@google.com


   Annabelle Backman
   Amazon

   Email: richanna@amazon.com


   Phil Hunt
   Oracle Corporation

   Email: phil.hunt@yahoo.com








Scurtescu, et al.         Expires July 30, 2018                [Page 22]

                              risc-secevent                 January 2018


   John Bradley
   Yubico

   Email: secevemt@ve7jtb.com















































Scurtescu, et al.         Expires July 30, 2018                [Page 23]
